# Generated by Django 4.1.1 on 2023-02-09 08:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("name", models.CharField(max_length=255)),
                ("link", models.URLField()),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Inactive"), (1, "Active")], default=1
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "companies",
                "db_table": "companies",
            },
        ),
        migrations.CreateModel(
            name="Ship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "imo_reg",
                    models.PositiveIntegerField(
                        unique=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000000),
                            django.core.validators.MaxValueValidator(9999999),
                        ],
                    ),
                ),
                (
                    "ship_type",
                    models.CharField(
                        choices=[
                            ("CNTR", "Container Ship"),
                            ("BULK", "Bulk Carrier"),
                            ("OIL", "Oil Tanker"),
                            ("GAS", "Gas/LNG Tanker"),
                            ("RORO", "Roll-On Roll-Off Ships"),
                            ("GEN", "General Cargo Ship"),
                            ("REFC", "Refrigerated Cargo Carrier"),
                            ("COMB", "Combination Carrier"),
                            ("LNGC", "LNG Carrier"),
                            ("RORV", "Ro-Ro Cargo Ship (Vehicle Carrier)"),
                            ("RORP", "Ro-Ro Passenger Ship"),
                            ("CRUZ", "Cruise Passenger Ship"),
                        ],
                        max_length=4,
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Inactive"), (1, "Active")], default=1
                    ),
                ),
            ],
            options={
                "db_table": "ships",
            },
        ),
        migrations.CreateModel(
            name="ShipUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "privilege",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Read only access"), (1, "Read and Write access")]
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Inactive"), (1, "Active")], default=1
                    ),
                ),
                (
                    "ship",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="core.ship"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "ship_users",
            },
        ),
        migrations.CreateModel(
            name="ShipSpecs",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("flag", models.CharField(max_length=127)),
                (
                    "deadweight_tonnage",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("cargo_unit", models.CharField(max_length=50)),
                (
                    "fuel_options",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("HFO", "HFO"),
                                ("LSFO", "LSFO"),
                                ("MDO", "MDO"),
                                ("MGO", "MGO"),
                                ("LPGP", "LPG (Propane)"),
                                ("LPGB", "LPG (Butane"),
                                ("METH", "Methanol"),
                                ("ETH", "Ethanol"),
                                ("LNG", "LNG"),
                            ],
                            max_length=4,
                        ),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "lubricating_oil_options",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=64),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "machinery_options",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=64),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "propeller_pitch",
                    models.DecimalField(decimal_places=4, max_digits=5),
                ),
                (
                    "ship",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT, to="core.ship"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "ship_specs",
                "db_table": "ship_specs",
            },
        ),
        migrations.AddField(
            model_name="ship",
            name="assigned_users",
            field=models.ManyToManyField(
                through="core.ShipUser", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="ship",
            name="company",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="core.company"
            ),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("role", models.CharField(max_length=255)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Inactive"), (1, "Active")], default=1
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="core.company"
                    ),
                ),
            ],
            options={
                "db_table": "user_profiles",
            },
        ),
    ]
