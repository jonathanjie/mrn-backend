# Generated by Django 4.1.1 on 2022-12-21 07:32

from decimal import Decimal
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth0", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("name", models.CharField(max_length=255)),
                ("link", models.URLField()),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Inactive"), (1, "Active")], default=1
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "companies",
                "db_table": "companies",
            },
        ),
        migrations.CreateModel(
            name="FuelOilData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "fuel_oil_type",
                    models.CharField(
                        choices=[
                            ("HFO", "HFO"),
                            ("LSFO", "LSFO"),
                            ("MDO", "MDO"),
                            ("MGO", "MGO"),
                            ("LPGP", "LPG (Propane)"),
                            ("LPGB", "LPG (Butane"),
                            ("METH", "Methanol"),
                            ("ETH", "Ethanol"),
                            ("LNG", "LNG"),
                        ],
                        max_length=4,
                    ),
                ),
                (
                    "total_consumption",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "receipt",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "debunkering",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "rob",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                ("breakdown", models.JSONField()),
            ],
            options={
                "db_table": "fuel_oil_data",
            },
        ),
        migrations.CreateModel(
            name="FuelOilTotalConsumptionData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "fuel_oil_type",
                    models.CharField(
                        choices=[
                            ("HFO", "HFO"),
                            ("LSFO", "LSFO"),
                            ("MDO", "MDO"),
                            ("MGO", "MGO"),
                            ("LPGP", "LPG (Propane)"),
                            ("LPGB", "LPG (Butane"),
                            ("METH", "Methanol"),
                            ("ETH", "Ethanol"),
                            ("LNG", "LNG"),
                        ],
                        max_length=4,
                    ),
                ),
                (
                    "total_consumption",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "receipt",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "debunkering",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "rob",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                ("breakdown", models.JSONField()),
            ],
            options={
                "db_table": "fuel_oil_total_consumption_data",
            },
        ),
        migrations.CreateModel(
            name="LubricatingOilData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("fuel_oil_type", models.CharField(max_length=64)),
                (
                    "total_consumption",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "receipt",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "debunkering",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "rob",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "lubricating_oil_data",
            },
        ),
        migrations.CreateModel(
            name="LubricatingOilTotalConsumptionData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("fuel_oil_type", models.CharField(max_length=64)),
                (
                    "total_consumption",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "receipt",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0.0,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "debunkering",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0.0,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "rob",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "lubricating_oil_total_consumption_data",
            },
        ),
        migrations.CreateModel(
            name="ReportHeader",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("NOON", "Noon at Sea"),
                            ("DSBY", "Departure: Standby"),
                            ("DCSP", "Departure: COSP"),
                            ("ASBY", "Arrival: Standby"),
                            ("AFWE", "Arrival: FWE"),
                            ("BDN", "Bunker Delivery Note"),
                            ("EVNT", "Event in Harbour"),
                        ],
                        max_length=4,
                    ),
                ),
                ("report_num", models.PositiveIntegerField()),
                ("report_date", models.DateTimeField()),
                ("report_tz", models.FloatField()),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Inactive"), (1, "Active")], default=1
                    ),
                ),
            ],
            options={
                "db_table": "report_headers",
            },
        ),
        migrations.CreateModel(
            name="Ship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("name", models.CharField(max_length=255)),
                ("imo_reg", models.PositiveIntegerField()),
                (
                    "ship_type",
                    models.CharField(
                        choices=[
                            ("CNTR", "Container Ship"),
                            ("BULK", "Bulk Carrier"),
                            ("OIL", "Oil Tanker"),
                            ("GAS", "Gas/LNG Tanker"),
                            ("RORO", "Roll-On Roll-Off Ships"),
                            ("GEN", "General Cargo Ship"),
                            ("REFC", "Refrigerated Cargo Carrier"),
                            ("COMB", "Combination Carrier"),
                            ("LNGC", "LNG Carrier"),
                            ("RORV", "Ro-Ro Cargo Ship (Vehicle Carrier)"),
                            ("RORP", "Ro-Ro Passenger Ship"),
                            ("CRUZ", "Cruise Passenger Ship"),
                        ],
                        max_length=4,
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Inactive"), (1, "Active")], default=1
                    ),
                ),
            ],
            options={
                "db_table": "ships",
            },
        ),
        migrations.CreateModel(
            name="Voyage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("voyage_num", models.PositiveIntegerField()),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Inactive"), (1, "Active")], default=1
                    ),
                ),
                (
                    "ship",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="marinanet.ship"
                    ),
                ),
            ],
            options={
                "db_table": "voyages",
                "unique_together": {("ship", "voyage_num")},
            },
        ),
        migrations.CreateModel(
            name="ActualPerformanceData",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                (
                    "actual_performance_type",
                    models.CharField(
                        choices=[
                            ("PILOT_TO_PILOT", "Pilot to Pilot"),
                            ("PORT_TO_PORT", "Port to Port"),
                        ],
                        max_length=16,
                    ),
                ),
                (
                    "distance_obs_total",
                    models.DecimalField(
                        decimal_places=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                ("sailing_time", models.PositiveIntegerField()),
                (
                    "displacement",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "speed_average",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "rpm_average",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "me_average_daily_fo_consumption",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ArrivalPilotStation",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("date", models.DateTimeField()),
                ("position", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                (
                    "draft_fwd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "draft_mid",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "draft_aft",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "arrival_pilot_stations",
            },
        ),
        migrations.CreateModel(
            name="ArrivalStandbyTimeAndPosition",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("time", models.DateTimeField()),
                ("timezone", models.FloatField()),
                ("position", django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
            options={
                "db_table": "arrival_standby_time_and_position",
            },
        ),
        migrations.CreateModel(
            name="ArrrivalFWETimeAndPosition",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("time", models.DateTimeField()),
                ("timezone", models.FloatField()),
                ("position", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                (
                    "parking_status",
                    models.CharField(
                        choices=[
                            (
                                "ANCHOR_START_OUTSIDE",
                                "Anchoring Start (Outside Port Limit)",
                            ),
                            (
                                "ANCHOR_END_OUTSIDE",
                                "Anchoring End (Outside Port Limit)",
                            ),
                            (
                                "ANCHOR_START_INSIDE",
                                "Anchoring Start (Inside Port Limit) ",
                            ),
                            ("ANCHOR_END_INSIDE", "Anchoring End (Inside Port Limit)"),
                            ("DRIFTING_START", "Drifting Start"),
                            ("DRIFTING_END", "Drifting End"),
                            ("SHIFTING_START", "Shifting Start"),
                            ("SHIFTING_END", "Shifting End"),
                            ("BERTHING", "Berthing"),
                            ("DRY_DOCKING", "Dry Docking"),
                        ],
                        max_length=32,
                    ),
                ),
            ],
            options={
                "db_table": "arrival_fwe_time_and_position",
            },
        ),
        migrations.CreateModel(
            name="CargoOperation",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                (
                    "load_condition",
                    models.CharField(
                        choices=[
                            ("BALLAST", "Ballast"),
                            ("LADEN", "Laden"),
                            ("EASTBOUND", "Eastbound"),
                            ("WESTBOUND", "Westbound"),
                        ],
                        max_length=16,
                    ),
                ),
                ("loading", models.PositiveIntegerField()),
                ("unloading", models.PositiveIntegerField()),
                ("total", models.PositiveIntegerField()),
                ("time", models.PositiveSmallIntegerField()),
            ],
            options={
                "db_table": "cargo_operations",
            },
        ),
        migrations.CreateModel(
            name="ConsumptionConditionData",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                (
                    "consumption_type",
                    models.CharField(
                        choices=[
                            ("NOON_TO_NOON", "Noon to Noon"),
                            ("LAST_TO_STANDBY", "Last Report to Standby"),
                            ("IN_HARBOUR_PORT", "In Harbour / In Port"),
                            ("STANDBY_TO_RUNUP", "Standby to Run Up"),
                            ("NOON_TO_STANDBY", "Noon to Standby"),
                            ("STANDBY_TO_FWE", "Standby to FWE"),
                            ("LAST_TO_EVENT", "Last Report to Event"),
                        ],
                        max_length=16,
                    ),
                ),
            ],
            options={
                "db_table": "consumption_conduiion_data",
                "unique_together": {("report_header", "consumption_type")},
            },
        ),
        migrations.CreateModel(
            name="DeparturePilotStation",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("date", models.DateTimeField()),
                ("position", django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
            options={
                "db_table": "departure_pilot_stations",
            },
        ),
        migrations.CreateModel(
            name="DepartureRunUp",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("time", models.DateTimeField()),
                ("timezone", models.FloatField()),
                ("position", django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
            options={
                "db_table": "departure_runups",
            },
        ),
        migrations.CreateModel(
            name="DepartureVesselCondition",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                (
                    "draft_fwd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "draft_mid",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "draft_aft",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "constant",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "gm",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "ballast",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "displacement",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DistancePerformanceData",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                (
                    "hours_since_noon",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0")),
                            django.core.validators.MaxValueValidator(Decimal("48")),
                        ],
                    ),
                ),
                (
                    "hours_total",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "distance_to_go",
                    models.DecimalField(
                        decimal_places=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                ("remarks_for_changes", models.TextField(null=True)),
                (
                    "distance_observed_since_noon",
                    models.DecimalField(
                        decimal_places=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "distance_observed_total",
                    models.DecimalField(
                        decimal_places=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "distance_engine_since_noon",
                    models.DecimalField(
                        decimal_places=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "distance_engine_total",
                    models.DecimalField(
                        decimal_places=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "revolution_count",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "speed_since_noon",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "rpm_since_noon",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "slip_since_noon",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "speed_average",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "rpm_average",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "slip_average",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "distance_performance_data",
            },
        ),
        migrations.CreateModel(
            name="DistanceTimeData",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("time", models.PositiveSmallIntegerField()),
                (
                    "distance_obs",
                    models.DecimalField(
                        decimal_places=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "distance_eng",
                    models.DecimalField(
                        decimal_places=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "revolution_count",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "set_rpm",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "distance_time_data",
            },
        ),
        migrations.CreateModel(
            name="EventData",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("time", models.DateTimeField()),
                ("timezone", models.FloatField()),
                ("position", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("distance_travelled", models.PositiveSmallIntegerField()),
                (
                    "parking_status",
                    models.CharField(
                        choices=[
                            (
                                "ANCHOR_START_OUTSIDE",
                                "Anchoring Start (Outside Port Limit)",
                            ),
                            (
                                "ANCHOR_END_OUTSIDE",
                                "Anchoring End (Outside Port Limit)",
                            ),
                            (
                                "ANCHOR_START_INSIDE",
                                "Anchoring Start (Inside Port Limit) ",
                            ),
                            ("ANCHOR_END_INSIDE", "Anchoring End (Inside Port Limit)"),
                            ("DRIFTING_START", "Drifting Start"),
                            ("DRIFTING_END", "Drifting End"),
                            ("SHIFTING_START", "Shifting Start"),
                            ("SHIFTING_END", "Shifting End"),
                            ("BERTHING", "Berthing"),
                            ("DRY_DOCKING", "Dry Docking"),
                        ],
                        max_length=32,
                    ),
                ),
            ],
            options={
                "db_table": "event_data",
            },
        ),
        migrations.CreateModel(
            name="FuelOilDataCorrection",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("correction", models.DecimalField(decimal_places=2, max_digits=7)),
                ("remarks", models.TextField()),
                (
                    "fuel_oil_data",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.fueloildata",
                    ),
                ),
            ],
            options={
                "db_table": "fuel_oil_data_corrections",
            },
        ),
        migrations.CreateModel(
            name="FuelOilTotalConsumptionDataCorrection",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("correction", models.DecimalField(decimal_places=2, max_digits=7)),
                ("remarks", models.TextField()),
                (
                    "fuel_oil_tcdata",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.fueloiltotalconsumptiondata",
                    ),
                ),
            ],
            options={
                "db_table": "fuel_oil_total_consumption_data_corrections",
            },
        ),
        migrations.CreateModel(
            name="HeavyWeatherData",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                (
                    "total_hours",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "observed_distance",
                    models.DecimalField(
                        decimal_places=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "fuel_consumption",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "wind_direction",
                    models.CharField(
                        choices=[
                            ("N", "North"),
                            ("E", "East"),
                            ("S", "South"),
                            ("W", "West"),
                            ("NE", "Northeast"),
                            ("SE", "Southeast"),
                            ("SW", "Southwest"),
                            ("NW", "Northwest"),
                            ("NNE", "North-Northeast"),
                            ("ENE", "East-Northeast"),
                            ("ESE", "East-Southeast"),
                            ("SSE", "South-Southeast"),
                            ("SSW", "South-Southwest"),
                            ("WSW", "West-Southwest"),
                            ("WNW", "West-Northwest"),
                            ("NNW", "North-Northwest"),
                        ],
                        max_length=3,
                    ),
                ),
                (
                    "wind_speed",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "sea_direction",
                    models.CharField(
                        choices=[
                            ("N", "North"),
                            ("E", "East"),
                            ("S", "South"),
                            ("W", "West"),
                            ("NE", "Northeast"),
                            ("SE", "Southeast"),
                            ("SW", "Southwest"),
                            ("NW", "Northwest"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "sea_state",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Calm (Glassy)"),
                            (1, "Calm (Rippled)"),
                            (2, "Smooth (Wavelets)"),
                            (3, "Slight"),
                            (4, "Moderate"),
                            (5, "Rough"),
                            (6, "Very Rough"),
                            (7, "High"),
                            (8, "Very High"),
                            (9, "Phenomal"),
                        ]
                    ),
                ),
                ("remarks", models.TextField()),
            ],
            options={
                "db_table": "heavy_weather_data",
            },
        ),
        migrations.CreateModel(
            name="LubricatingOilDataCorrection",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("correction", models.DecimalField(decimal_places=2, max_digits=7)),
                ("remarks", models.TextField()),
                (
                    "lubricating_oil_data",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.lubricatingoildata",
                    ),
                ),
            ],
            options={
                "db_table": "lubricating_oil_data_corrections",
            },
        ),
        migrations.CreateModel(
            name="LubricatingOilTotalConsumptionDataCorrection",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("correction", models.DecimalField(decimal_places=2, max_digits=7)),
                ("remarks", models.TextField()),
                (
                    "lubricating_oil_tcdata",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.lubricatingoiltotalconsumptiondata",
                    ),
                ),
            ],
            options={
                "db_table": "lubricating_oil_total_consumption_data_corrections",
            },
        ),
        migrations.CreateModel(
            name="NoonReportTimeAndPosition",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("time", models.DateTimeField()),
                ("timezone", models.FloatField()),
                ("position", django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
            options={
                "db_table": "noon_report_time_and_position",
            },
        ),
        migrations.CreateModel(
            name="PlannedOperations",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("cargo_operation_berth", models.BooleanField()),
                ("cargo_operation_stsstb", models.BooleanField()),
                ("bunkering_debunkering", models.BooleanField()),
                ("dry_docking", models.BooleanField()),
                ("crew_change", models.BooleanField()),
                ("receiving_provisions_spares", models.BooleanField()),
                ("surveying", models.BooleanField()),
                ("others", models.BooleanField()),
                ("planned_operation_othersdetails", models.TextField(null=True)),
            ],
            options={
                "db_table": "planned_operations",
            },
        ),
        migrations.CreateModel(
            name="PortOperations",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("waiting", models.BooleanField()),
                ("cargo_operation", models.BooleanField()),
                ("bunkering_debunkering", models.BooleanField()),
                ("others", models.BooleanField()),
                ("others_details", models.TextField(null=True)),
            ],
            options={
                "db_table": "port_operations",
            },
        ),
        migrations.CreateModel(
            name="ReportRoute",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("departure_port", models.CharField(max_length=6)),
                ("departure_date", models.DateTimeField()),
                ("depature_tz", models.FloatField()),
                ("arrival_port", models.CharField(max_length=6)),
                ("arrival_date", models.DateTimeField()),
                ("arrival_tz", models.FloatField()),
            ],
            options={
                "db_table": "report_routes",
            },
        ),
        migrations.CreateModel(
            name="StoppageData",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "duration",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "reduced_rpm",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                ("position", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("ENGINE_PROBLEM", "Engine Problem"),
                            ("ACCIDENT", "Accident"),
                            ("COLLISION", "Collision"),
                            ("GROUNDING", "Grounding"),
                            ("OIL_SPILL", "Oil Spill"),
                            ("OTHER", "Other"),
                        ],
                        max_length=16,
                    ),
                ),
                ("remarks", models.TextField()),
            ],
            options={
                "db_table": "stoppage_data",
            },
        ),
        migrations.CreateModel(
            name="TotalConsumptionData",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                (
                    "consumption_type",
                    models.CharField(
                        choices=[
                            ("IN_HARBOUR_PORT", "In Harbour / In Port"),
                            ("PILOT_TO_PILOT", "Pilot to Pilot"),
                            ("PORT_TO_PORT", "Port to Port"),
                        ],
                        max_length=16,
                    ),
                ),
            ],
            options={
                "db_table": "total_consumption_data",
            },
        ),
        migrations.CreateModel(
            name="TransoceanicBudget",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                (
                    "distance_to_go",
                    models.DecimalField(
                        decimal_places=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "speed",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "me_daily_fo_consumption",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "me_rpm",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "transoceanic_budgets",
            },
        ),
        migrations.CreateModel(
            name="WeatherData",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "report_header",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.reportheader",
                    ),
                ),
                (
                    "weather_notation",
                    models.CharField(
                        choices=[
                            ("B", "Blue sky (Cloud 0-2)"),
                            ("BC", "Fine but Cloudy (Cloud 3-7)"),
                            ("C", "Cloudy (Cloud 8-10)"),
                            ("D", "Drizzling rain"),
                            ("F", "Fog"),
                            ("G", "Gloom"),
                            ("H", "Hail"),
                            ("L", "Lightning"),
                            ("M", "Mist"),
                            ("O", "Overcast (Cloud 10)"),
                            ("P", "Passing showers"),
                            ("Q", "Squalls"),
                            ("R", "Rain"),
                            ("S", "Snow"),
                            ("T", "Thunder"),
                            ("U", "Ugly threatening weather"),
                            ("W", "Dew"),
                            ("Z", "Haze"),
                        ],
                        max_length=2,
                    ),
                ),
                ("visibility", models.PositiveSmallIntegerField()),
                (
                    "wind_direction",
                    models.CharField(
                        choices=[
                            ("N", "North"),
                            ("E", "East"),
                            ("S", "South"),
                            ("W", "West"),
                            ("NE", "Northeast"),
                            ("SE", "Southeast"),
                            ("SW", "Southwest"),
                            ("NW", "Northwest"),
                            ("NNE", "North-Northeast"),
                            ("ENE", "East-Northeast"),
                            ("ESE", "East-Southeast"),
                            ("SSE", "South-Southeast"),
                            ("SSW", "South-Southwest"),
                            ("WSW", "West-Southwest"),
                            ("WNW", "West-Northwest"),
                            ("NNW", "North-Northwest"),
                        ],
                        max_length=3,
                    ),
                ),
                (
                    "wind_speed",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0"))
                        ],
                    ),
                ),
                (
                    "sea_direction",
                    models.CharField(
                        choices=[
                            ("N", "North"),
                            ("E", "East"),
                            ("S", "South"),
                            ("W", "West"),
                            ("NE", "Northeast"),
                            ("SE", "Southeast"),
                            ("SW", "Southwest"),
                            ("NW", "Northwest"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "sea_state",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Calm (Glassy)"),
                            (1, "Calm (Rippled)"),
                            (2, "Smooth (Wavelets)"),
                            (3, "Slight"),
                            (4, "Moderate"),
                            (5, "Rough"),
                            (6, "Very Rough"),
                            (7, "High"),
                            (8, "Very High"),
                            (9, "Phenomal"),
                        ]
                    ),
                ),
                (
                    "swell_direction",
                    models.CharField(
                        choices=[
                            ("N", "North"),
                            ("E", "East"),
                            ("S", "South"),
                            ("W", "West"),
                            ("NE", "Northeast"),
                            ("SE", "Southeast"),
                            ("SW", "Southwest"),
                            ("NW", "Northwest"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "swell_scale",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "No Swell"),
                            (1, "Low Swell (Short or Average)"),
                            (2, "Low Swell (Long)"),
                            (3, "Moderate Swell (Short)"),
                            (4, "Moderate Swell (Average)"),
                            (5, "Moderate Swell (Long)"),
                            (6, "Heavy Swell (Short)"),
                            (7, "Heavy Swell (Moderate)"),
                            (8, "Heavy Swell (Long)"),
                            (9, "Confused Swell"),
                        ]
                    ),
                ),
                ("air_pressure", models.PositiveSmallIntegerField()),
                (
                    "air_temperature_dry",
                    models.DecimalField(decimal_places=1, max_digits=3),
                ),
                (
                    "air_temperature_wet",
                    models.DecimalField(decimal_places=1, max_digits=3),
                ),
                (
                    "sea_temperature",
                    models.DecimalField(decimal_places=1, max_digits=3),
                ),
                (
                    "ice_condition",
                    models.CharField(
                        choices=[
                            ("NONE", "NONE"),
                            ("LOW", "LOW"),
                            ("MOD", "MODERATE"),
                            ("HIGH", "HIGH"),
                            ("EXT", "EXTENSIVE"),
                        ],
                        default="NONE",
                        max_length=4,
                    ),
                ),
            ],
            options={
                "db_table": "weather_data",
            },
        ),
        migrations.CreateModel(
            name="VoyageLeg",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("leg_num", models.PositiveSmallIntegerField()),
                ("departure_port", models.CharField(max_length=6)),
                ("departure_date", models.DateTimeField()),
                ("depature_tz", models.FloatField()),
                ("arrival_port", models.CharField(max_length=6)),
                ("arrival_date", models.DateTimeField()),
                ("arrival_tz", models.FloatField()),
                (
                    "voyage",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="marinanet.voyage",
                    ),
                ),
            ],
            options={
                "db_table": "voyage_legs",
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("role", models.CharField(max_length=255)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Inactive"), (1, "Active")], default=1
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="marinanet.company",
                    ),
                ),
            ],
            options={
                "db_table": "profiles",
            },
        ),
        migrations.CreateModel(
            name="ShipUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "privilege",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Read only access"), (1, "Read and Write access")]
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Inactive"), (1, "Active")], default=1
                    ),
                ),
                (
                    "ship",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="marinanet.ship"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "ship_users",
            },
        ),
        migrations.CreateModel(
            name="ShipSpecs",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("flag", models.CharField(max_length=127)),
                (
                    "deadweight_tonnage",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("cargo_unit", models.CharField(max_length=50)),
                ("fuel_options", models.JSONField()),
                ("lubricating_oil_options", models.JSONField()),
                ("machinery_options", models.JSONField()),
                (
                    "propeller_pitch",
                    models.DecimalField(decimal_places=1, max_digits=3),
                ),
                (
                    "ship",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT, to="marinanet.ship"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "ship_specs",
                "db_table": "ship_specs",
            },
        ),
        migrations.AddField(
            model_name="ship",
            name="assigned_users",
            field=models.ManyToManyField(
                through="marinanet.ShipUser", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="ship",
            name="company",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="marinanet.company"
            ),
        ),
        migrations.AddField(
            model_name="reportheader",
            name="voyage_leg",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="marinanet.voyageleg"
            ),
        ),
        migrations.CreateModel(
            name="FreshWaterData",
            fields=[
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "ccdata",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        primary_key=True,
                        serialize=False,
                        to="marinanet.consumptionconditiondata",
                    ),
                ),
                ("consumed", models.PositiveIntegerField()),
                ("evaporated", models.PositiveIntegerField()),
                ("received", models.PositiveIntegerField()),
                ("discharged", models.PositiveIntegerField()),
                ("rob", models.PositiveIntegerField()),
            ],
            options={
                "db_table": "fresh_water_data",
            },
        ),
        migrations.AddField(
            model_name="lubricatingoiltotalconsumptiondata",
            name="tc_data",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="marinanet.totalconsumptiondata",
            ),
        ),
        migrations.AddField(
            model_name="lubricatingoildata",
            name="ccdata",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="marinanet.consumptionconditiondata",
            ),
        ),
        migrations.AddField(
            model_name="fueloiltotalconsumptiondata",
            name="tc_data",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="marinanet.totalconsumptiondata",
            ),
        ),
        migrations.AddField(
            model_name="fueloildata",
            name="ccdata",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="marinanet.consumptionconditiondata",
            ),
        ),
    ]
